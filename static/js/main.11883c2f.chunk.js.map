{"version":3,"sources":["todolist/todo.component.jsx","todolist/todoform.component.jsx","todolist/todolist.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","state","isEditing","task","props","handleChange","event","target","value","name","setState","handleUpdate","preventDefault","updateTodo","id","toggle","handleRemove","removeTodo","this","className","onSubmit","type","placeholder","onChange","completed","onClick","toggleTodo","Component","TodoForm","handleSubmit","createTodo","uuid","Todolist","todos","create","newTodo","remove","filter","todo","update","updatedTask","updatedTodos","map","toggleCompleted","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11883c2f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./todo.scss\";\r\nexport class Todo extends Component {\r\n  state = {\r\n    isEditing: false,\r\n    task: this.props.task,\r\n  };\r\n  handleChange = (event) => {\r\n    const { value, name } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n  handleUpdate = (event) => {\r\n    event.preventDefault();\r\n    this.props.updateTodo(this.props.id, this.state.task);\r\n    this.setState({ isEditing: false });\r\n  };\r\n  toggle = () => {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  };\r\n  handleRemove = () => {\r\n    const { removeTodo, id } = this.props;\r\n    removeTodo(id);\r\n  };\r\n  render() {\r\n    const { task } = this.props;\r\n    let result;\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div className=\"newTodo\">\r\n          <form className=\"newTodo__editForm\" onSubmit={this.handleUpdate}>\r\n            <input\r\n              name=\"task\"\r\n              type=\"text\"\r\n              placeholder=\"New Todo\"\r\n              value={this.state.task}\r\n              onChange={this.handleChange}\r\n            />\r\n            <button>save</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else {\r\n      result = (\r\n        <div className=\"newTodo\">\r\n          <li\r\n            className={this.props.completed ? \"todoTask completed\" : \"todoTask\"}\r\n            onClick={() => this.props.toggleTodo(this.props.id)}\r\n          >\r\n            {task}\r\n          </li>\r\n          <div className=\"todoButton\">\r\n            <button onClick={this.toggle}>\r\n              <i className=\"fa fa-pen\"></i>\r\n            </button>\r\n            <button onClick={this.handleRemove}>\r\n              <i className=\"fa fa-trash\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"./todoform.scss\";\r\nexport class TodoForm extends Component {\r\n  state = { task: \"\" };\r\n  handleChange = (event) => {\r\n    const { value, name } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.createTodo({ ...this.state, id: uuid(), completed: false });\r\n    this.setState({\r\n      task: \"\",\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"todoForm\">\r\n        <h4>Add a New Todo</h4>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            name=\"task\"\r\n            type=\"text\"\r\n            placeholder=\"Write Something...\"\r\n            value={this.state.task}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button>Add </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from \"react\";\r\nimport Todo from \"./todo.component\";\r\nimport TodoForm from \"./todoform.component\";\r\nimport \"./todolist.scss\";\r\nexport class Todolist extends Component {\r\n  state = {\r\n    todos: [\r\n      { id: 1, task: \"Stepping Out Of The Comfort Zone.\", completed: false },\r\n      {\r\n        id: 2,\r\n        task: \"5 Second Rule.\",\r\n        completed: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  create = (newTodo) => {\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo],\r\n    });\r\n  };\r\n\r\n  remove = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => todo.id !== id),\r\n    });\r\n  };\r\n\r\n  update = (id, updatedTask) => {\r\n    const updatedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return { ...todo, task: updatedTask };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  };\r\n  toggleCompleted = (id) => {\r\n    const updatedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return { ...todo, completed: !todo.completed };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  };\r\n  render() {\r\n    //  const todos = this.state.todos.map((todo) => {\r\n    // return (\r\n    // <Todo\r\n    //  key={todo.id}\r\n    //   id={todo.id}\r\n    //    task={todo.task}\r\n    //  completed={todo.completed}\r\n    //removeTodo={this.remove}\r\n    // updateTodo={this.update}\r\n    // toggleTodo={this.toggleCompleted}\r\n    // />\r\n    //);\r\n    //});\r\n    return (\r\n      <div className=\"todo\">\r\n        <h1>\r\n          Todo List! <span>A simple react todo list app.</span>\r\n        </h1>\r\n\r\n        <ul>\r\n          {this.state.todos.map((todo) => (\r\n            <Todo\r\n              key={todo.id}\r\n              id={todo.id}\r\n              task={todo.task}\r\n              completed={todo.completed}\r\n              removeTodo={this.remove}\r\n              updateTodo={this.update}\r\n              toggleTodo={this.toggleCompleted}\r\n            />\r\n          ))}\r\n        </ul>\r\n        <TodoForm createTodo={this.create} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todolist;\r\n","import React from \"react\";\nimport Todolist from \"./todolist/todolist.component\";\nfunction App() {\n  return (\n    <div>\n      <Todolist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}